(3 Alternativen bisher)

		move else einsammeln0		; bisher keinmal bewegt (Annahme: es hat sich wegen einer Insel nicht bewegen koennen.)
		move else einsammeln1		; bisher einmal bewegt	(Deshalb springt es zu einem Pickup Command und sammelt blind.)
		move else einsammeln2		; bisher zweimal bewegt  
		move else einsammeln3		; bisher dreimal bewegt
		move else einsammeln4		; bisher 4mal bewegt
		move else einsammeln5		; bisher 5mal bewegt
		move else einsammelnX		; bisher Xmal bewegt
		goto somerwhereElse		; wenn bis dahin nix gefunden, soll er eben was anderes machen.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ALTERNATIVE 1:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	Pros: Weniger instructions(27), der Teil mit den ifabfragen wäre wiederverwertbar; 
	Cons: Schiff bräuchte bis zu 3 Züge mehr als nötig. Bojen würden Entfernungen statt Richtungen anzeigen.
	#Zuege = n*8 + 3 + 5 + (1,2,3) , mit n > 0

*einsammeln0 	pickup 0 else   ??		; hier hat das schiff sich noch nicht bewegt, also muss auch keine boje gesetzt werden.
		goto drop			; angenommen, es gibt einen Schatz (Zuege: 4)
*einsammeln1 	pickup 0 else 	??		; 1* move, return now: das schiff ist nur gerade aus gefahren bisher
		mark1				; schmeisst eine boje, die ihm sagt wie oft es sich bewegen muss.(Zuege: 11 + 5 + 3 = 19)
		goto return_now			; angenommen, es gibt einen Schatz
*einsammeln2	pickup 0 else 	??		; 2* move
		mark2				; schmeisst eine boje, die ihm sagt wie oft es sich bewegen muss.(Zuege: 19 + 5 + 2 = 26)
		goto return_now			; angenommen, es gibt einen Schatz
*einsammeln3	pickup 0 else 	??		; 3* move
		mark3				; schmeisst eine boje, die ihm sagt wie oft es sich bewegen muss.(Zuege: 27 + 5 + 1 = 33)
		goto return_now			; angenommen, es gibt einen Schatz
*einsammeln4	pickup 0 else 	??		; 4* move
		mark4				; schmeisst eine boje, die ihm sagt wie oft es sich bewegen muss.(Zuege: 35 + 5 + 2 = 42)
		goto return_now			; angenommen, es gibt einen Schatz
*einsammeln5	pickup 0 else 	??		; 5* move	
		mark5				; schmeisst eine boje, die ihm sagt wie oft es sich bewegen muss.(Zuege: 43 + 5 + 1 = 49)
            	goto return_now			; angenommen, es gibt einen Schatz
*return_now 	turn right
		turn right
		turn right
		sense 0
		ifany !sense_marker1 !sense_marker2 !sense_marker4 !sense_marker5 else sense4_5
		goto moves3
*sense4_5	ifany !sense_marker4 !sense_marker5 else sense4
		if sense_marker1 else moves2
		goto moves1
*sense4		if sense_marker4 else moves5
		goto moves4
*moves5		move else  friendorfoe1  ;wenn da kein weiterkommen ist, steht da jemand im weg.
*moves4		move else  friendorfoe2
*moves3		move else  friendorfoe3
*moves2		move else  friendorfoe4
*moves1		move else  friendorfoe5
		drop

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ALTERNATIVE 2:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	Pros: Schiff braucht weniger Züge, können im grunde beliebig viele moves sein; 
	Cons: 7 instructions mehr als nötig und für jeden weiteren move kommen zwei instructions hinzu (also +3 gesamt).
	#Zuege = n*8 + 6 , mit n > 0 

*einsammeln0 	pickup 0 else 	goElse0		; hier hat das schiff sich noch nicht bewegt, also muss auch keine boje gesetzt werden.
		goto drop_label			; angenommen, es gibt einen Schatz (Zuege = 4)
*einsammeln1 	pickup 0 else 	goElse1		; 1* move, return now: das schiff ist nur gerade aus gefahren bisher
		turn right			; angenommen, es gibt einen Schatz
*ein1-tr	turn right
*ein1-trtr	turn right
		move else ??
		goto drop_label			; zum label, weil danach irgendwas neues ausgeführt werden soll. 
*einsammeln2	pickup 0 else 	goElse2		; 2* move
		turn right			; angenommen, es gibt einen Schatz
*ein2-tr	turn right
*ein2-trtr	turn right
		move else friendOrFoe?		; wenn hier was im weg ist, dann ein Schiff. 
		move else ??
		goto drop_label			; zum label, weil danach irgendwas neues ausgeführt werden soll. 
*einsammeln3	pickup 0 else 	goElse3		; 3* move
		turn right			; angenommen, es gibt einen Schatz
*ein3-tr	turn right
*ein3-trtr	turn right
		move else ??
		move else ??
		move else ??
		goto drop_label			; zum label, weil danach irgendwas neues ausgeführt werden soll. 
*einsammeln4	pickup 0 else 	goElse4		; 4* move	
		turn right			; angenommen, es gibt einen Schatz
*ein4-tr	turn right
*ein4-trtr	turn right
		move else ??
		move else ??
		move else ??
		move else ??
		goto drop_label			; zum label, weil danach irgendwas neues ausgeführt werden soll. 
*einsammeln5	pickup 0 else 	goElse5		; 5* move
		turn right			; angenommen, es gibt einen Schatz
*ein4-tr	turn right
*ein4-trtr	turn right
		move else ??
		move else ??
		move else ??
		move else ??
		move else ??
		goto drop_label			; zum label, weil danach irgendwas neues ausgeführt werden soll. 	
            	
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ALTERNATIVE 3:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	Pros: sehr wenige instructions fuer sehr viele aktionen. Braucht gelegentlich weniger Zuege.
	Cons: braucht uU sehr viel mehr Zuege.(s. Beispiel Rechnung unten)
	#Zuege = n*12 + 4, n > 0

			Fuer 	1 move  = 16 Zuege (alt1: 19; alt2: 14)
				2 moves = 28 Zuege (alt1: 26; alt2: 22)
				3 moves = 40 Zuege (alt1: 33; alt2: 30)
				4 moves = 52 Zuege (alt1: 42; alt2: 38) 
				5 moves = 64 Zuege (alt1: 49; alt2: 46)

		move else getTreasure1
*init 		move else getTreasure2		;
		goto init
*getTreasure1	pickup 0 else ??		;(Zuege 6)
		drop
		turn right
		goto init			
*getTreasure2	pickup 0 else ??		;
							
		turn right				
		turn right
		turn right 
*callingHome	sense0
		if sense_celltype==home else proceed
		move else ??
		drop
		turn left
		turn left 	
		turn left
		goto init
*proceed	move else ??
		goto callingHome






